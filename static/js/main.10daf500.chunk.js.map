{"version":3,"sources":["InputForm.js","OutputTable.js","Presets.js","data/unitsSet.js","data/presetsSet.js","App.js","index.js"],"names":["initialState","number","units","unitsExponent","meterExponent","meterValue","overallExponent","InputForm","state","handleChange","event","target","name","value","setState","handleUnitsChange","unitsIndex","R","props","unitsSet","chosenUnit","this","handleSubmit","unitsFill","x","key","type","id","onChange","autoFocus","onClick","Number","alert","Component","exponentSeparate","numx","toExponential","regexpDigit","result","slice","exec","index","numberExponent","length","toPrecision","LatexOutput","input","latex","numbersplit","tenpower","unitfactor","LatexOutputFactored","LatexInput","inputLatex","inputNonLatex","inputLatexNumerator","presetExponent","inputLatexDenominator","latexReduce","a","b","Math","abs","inputLatexNumeratorConcat","inputLatexDenominatorConcat","latexFinal","latexFinalFill","inputNonLatexFill","map","i","className","meterValues","array","output","pow","unitConvertor","outputUnit","finalUnit","OutputTable","handleOutputUnitChange","handleReset","GNis1","handleGNis1Toggle","outputInFinalUnits","outputInFinalUnitsFactored","convertedInput","unitConvertorFactored","checked","undefined","presetName","Presets","handlePresetChange","presetsSet","presetsIndex","presetsFill","obj","exponent","presetExponentiator","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10daf500.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n\n\nlet initialState = {\n  number: null,\n  units: null,\n  unitsExponent: 0,\n  meterExponent: null,\n  meterValue: null,\n  overallExponent: 1,\n};\n\nclass InputForm extends Component {\n\n  state = initialState;\n\n  // code for handling changes\n\n  handleChange = event => {\n    let { name, value } = event.target\n    // The [ ] brackets here are the setState synatx\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  // Special code for units\n  handleUnitsChange = event => {\n    let { value } = event.target\n    // find which  unit was selected\n    let unitsIndex = R.findIndex(R.propEq('units', value))(this.props.unitsSet);\n    let chosenUnit = this.props.unitsSet[unitsIndex]\n    this.setState({\n      units: chosenUnit.units,\n      meterExponent: chosenUnit.meterExponent,\n      meterValue: chosenUnit.meterValue,\n    })\n  }\n\n\n  render() {\n\n    let { number, units, unitsExponent, overallExponent } = this.state;\n    let { handleSubmit, unitsSet } = this.props;\n\n\n    // Units options\n    let unitsFill = R.map((x) => { if(x.units==='GN') {return null} else { return (<option key={x.units} value={x.units}>{x.units}</option>) }}, unitsSet);\n    \n\n    return (\n\n      <div>\n        <form>\n\n\n          <label>Number</label>\n          <input\n            type=\"number\"\n            name=\"number\"\n            id=\"number\"\n            value={number || ''}\n            onChange={this.handleChange}\n            autoFocus />\n\n\n\n          <label>Units </label>\n          <select\n            name=\"units\"\n            id=\"units\"\n            value={units || ''}\n            onChange={this.handleUnitsChange}\n          >\n            <option value=\"\"></option>\n            {unitsFill}\n          </select>\n\n          <label>Unit Exponent</label>\n          <input\n            type=\"number\"\n            name=\"unitsExponent\"\n            id=\"unitsExponent\"\n            value={unitsExponent || ''}\n            onChange={this.handleChange}\n          />\n\n          <label>Overall Exponent</label>\n          <input\n            type=\"number\"\n            name=\"overallExponent\"\n            id=\"overallExponent\"\n            value={overallExponent}\n            onChange={this.handleChange}\n          />\n\n        </form>\n\n        <input\n          type=\"button\"\n          value=\"Submit\"\n          onClick={() => {\n            if (number && Number(overallExponent)!==0) {\n              handleSubmit(\n                this.state\n              );\n              this.setState(initialState);\n            }\n            else {\n              alert('Please enter a number/non-zero overall exponent');\n              this.setState(initialState);\n            }\n          }\n          }\n        />\n        <input\n          type=\"button\"\n          value=\"Clear\"\n          onClick={() => {\n            this.setState(initialState);\n          }}\n        />\n\n\n      </div>\n    )\n  }\n\n}\n\n\nexport default InputForm","import React from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n// Latex\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\n// Create a fuction to separate exponential notation numbers into a prefactor and an exponent\nlet exponentSeparate = (x) => {\n  let numx = Number(x).toExponential();\n  let regexpDigit = /[e]/;\n  let result = {};\n  result.number = numx.slice(0, regexpDigit.exec(numx).index);\n  result.numberExponent = numx.slice(regexpDigit.exec(numx).index + 1, numx.length);\n  return ([Number(result.number).toPrecision(3), Number(result.numberExponent)]);\n};\n\n\n\n\n// Standardized latex output\nlet LatexOutput = (props) => {\n  let { input } = props;\n  if (input.latex) {\n    if (Number(input.unitsExponent) !== 1) {\n      return (\n        <InlineMath>\n          {input.latex + '^{' + input.unitsExponent + '}'}\n        </InlineMath>\n      );\n    } else {\n      return (\n        <InlineMath>\n          {input.latex}\n        </InlineMath>\n      );\n    };\n  } else {\n    let numbersplit = exponentSeparate(input.number);\n    let tenpower = '';\n    if (numbersplit[1]) {\n      tenpower = '\\\\times 10^{' + numbersplit[1] + '}';\n    }\n    let unitfactor = '';\n    if (input.units !== 'GN') {\n      if (Number(input.unitsExponent)) {\n        if (Number(input.unitsExponent) !== 1) {\n          unitfactor = '\\\\  \\\\mathrm{' + input.units + '} ^{' + input.unitsExponent + '}';\n        } else {\n          unitfactor = '\\\\  \\\\mathrm{' + input.units + '}';\n        };\n      }\n    }\n\n    if (input.overallExponent && input.overallExponent !== 1) {\n      return (\n        <InlineMath>\n          {'\\\\left(' + numbersplit[0] + tenpower + unitfactor + '\\\\right)^{' + input.overallExponent + '}'}\n        </InlineMath>\n      )\n    } else {\n      return (\n        <InlineMath>\n          {numbersplit[0] + tenpower + unitfactor}\n        </InlineMath>\n      );\n    };\n  };\n};\n\n\n// Standardized factored latex output\n\nlet LatexOutputFactored = (props) => {\n  let { input } = props;\n  let numbersplit = exponentSeparate(input.number);\n  let tenpower = '';\n  if (Number(numbersplit[1])) {\n    tenpower = '\\\\times 10^{' + numbersplit[1] + '}';\n  }\n  let unitfactor = '';\n  if (Number(input.unitsExponent)) {\n    unitfactor = '\\\\  \\\\mathrm{' + input.units + '}';\n  }\n\n  return (\n    <InlineMath>\n      {' \\\\left (' + numbersplit[0] + tenpower + unitfactor + ' \\\\right) ^{' + input.unitsExponent + '}'}\n    </InlineMath>\n  );\n};\n\n// Standardized latex input, takes input *array* and organizes latex vs non-latex components to display nicely\nlet LatexInput = (props) => {\n  let { input } = props;\n  // Split into latexed and non-latex parts\n  let inputLatex = R.filter(R.has('latex'), input);\n  let inputNonLatex = R.difference(input, inputLatex);\n\n  // Then format the latexed output\n  let inputLatexNumerator = R.filter(x => x.presetExponent > 0, inputLatex);\n  let inputLatexDenominator = R.filter(x => x.presetExponent < 0, inputLatex);\n  // reduce function for latexing\n  let latexReduce = (a, b) => {\n    if (Math.abs(b.presetExponent) === 1) {\n      return (a + ' '+ b.latex)\n    } else {\n      return (a +' '+ b.latex + '^{' + Math.abs(b.presetExponent) + '}')\n    }\n  }\n\n  let inputLatexNumeratorConcat = R.reduce(latexReduce, '', inputLatexNumerator);\n  let inputLatexDenominatorConcat = R.reduce(latexReduce, '', inputLatexDenominator);\n\n  // Final output for latexed presets:\n  let latexFinal = ''\n  if (inputLatexDenominatorConcat && inputLatexNumeratorConcat) {\n    latexFinal = '\\\\frac{' + inputLatexNumeratorConcat + '}{' + inputLatexDenominatorConcat + '}';\n  } else if (inputLatexDenominatorConcat && !inputLatexNumeratorConcat) {\n    latexFinal = '\\\\frac{1}{' + inputLatexDenominatorConcat + '}';\n  } else {\n    latexFinal = inputLatexNumeratorConcat;\n  }\n\n  let latexFinalFill = <li key={'latex'}><InlineMath>{latexFinal}</InlineMath></li>;\n\n  // Output for non-latexed inputs\n  let inputNonLatexFill = inputNonLatex.map((x, i) => {\n    return (\n      <li key={i}>\n        <LatexOutput\n          input={x}\n        />\n      </li>\n    )\n  });\n\n\n  return (\n    <ul className={\"no-li-marks\"}>\n      {inputNonLatexFill}\n      <li key={'blank'}></li>\n      {latexFinalFill}\n    </ul>\n  );\n\n};\n\n\n// Multiplying together all meters values input array and turning into a single number, exponent pair.\nlet meterValues = (array) => {\n  let output = {};\n  output.number = R.reduce((a, b) => { return (Math.pow((Number(b.number) * Math.pow(b.meterValue, -b.meterExponent * b.unitsExponent)), b.overallExponent) * a) }, 1, array).toExponential()\n  output.meterExponent = R.reduce((a, b) => { return (b.unitsExponent * b.meterExponent * b.overallExponent + a) }, 0, array);\n  return (\n    output\n  );\n};\n\n\n\n// Converting output to desired units\nlet unitConvertor = (input, outputUnit, unitsSet) => {\n  // find which  unit was selected\n  let unitIndex = R.findIndex(R.propEq('units', outputUnit))(unitsSet);\n  let finalUnit = unitsSet[unitIndex];\n  let output = {};\n  output.number = ((meterValues(input).number) * Math.pow(finalUnit.meterValue, meterValues(input).meterExponent)).toExponential();\n  output.unitsExponent = finalUnit.meterExponent * meterValues(input).meterExponent;\n  output.units = outputUnit;\n  return (output);\n};\n// Same as above, but factorized\nlet unitConvertorFactored = (input, outputUnit, unitsSet) => {\n  // convert input as above\n  let convertedInput = unitConvertor(input, outputUnit, unitsSet)\n  let output = {};\n  if (convertedInput.unitsExponent) {\n    output.number = Math.pow(convertedInput.number, 1 / convertedInput.unitsExponent).toExponential();\n    output.unitsExponent = convertedInput.unitsExponent;\n    output.units = outputUnit;\n    return (\n      output\n    );\n  } else {\n    return (output)\n  };\n};\n\nlet OutputTable = (props) => {\n\n  let { input, unitsSet, handleOutputUnitChange, outputUnit, handleReset, GNis1, handleGNis1Toggle } = props;\n\n  let outputInFinalUnits = unitConvertor(input, outputUnit, unitsSet);\n  let outputInFinalUnitsFactored = unitConvertorFactored(input, outputUnit, unitsSet);\n\n  // Units options\n  let unitsFill = R.map((x) => { if (x.units === 'GN') { return null } else { return (<option key={x.units} value={x.units}>{x.units}</option>) } }, unitsSet);\n\n\n  // Each input value contains (number, numberExponent, units, unitsExponent,meterExponent,meterValue) properties\n\n\n\n\n  return (\n    <div>\n      <label>\n        <input\n          type={'checkbox'}\n          checked={GNis1}\n          onChange={handleGNis1Toggle} />\n      \\(\\ G_N=1\\)\n      </label>\n      {!GNis1 &&\n        <form>\n          <label>Output Unit </label>\n          <select\n            name=\"outputUnit\"\n            id=\"outputUnit\"\n            value={outputUnit ? outputUnit : undefined}\n            onChange={handleOutputUnitChange}\n          >\n            {unitsFill}\n          </select>\n        </form>\n      }\n\n\n\n      {input[0]\n        &&\n        <div>\n          <h4>\n            Input Factors\n           </h4>\n          <LatexInput\n            input={input}\n          />\n\n          <h4>\n            Net Result\n           </h4>\n          <ul className={\"no-li-marks\"}>\n            <li>\n              <LatexOutput\n                input={outputInFinalUnits}\n              />\n              {outputInFinalUnits.unitsExponent !== 1 && outputInFinalUnits.unitsExponent !== 0 && outputInFinalUnits.units !== 'GN'\n                &&\n                <span>\n                  <InlineMath>\n                    =\n              </InlineMath>\n                  <LatexOutputFactored\n                    input={outputInFinalUnitsFactored}\n                  />\n                </span>\n              }\n            </li>\n          </ul>\n\n          <input\n            type=\"button\"\n            value=\"Reset\"\n            onClick={() => {\n              handleReset()\n            }\n            }\n          />\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default OutputTable","import React, { Component } from 'react'\n\n// Ramda\nimport * as R from 'ramda';\n\n\n\nlet initialState = {\n    meterValue: null,\n    presetExponent: 1,\n    presetName: null,\n};\n\nclass Presets extends Component {\n\n    state = initialState;\n\n    // event handlers\n    handlePresetChange = event => {\n        let { value } = event.target;\n        // find which  unit was selected\n        let { presetsSet } = this.props;\n        let presetsIndex = R.findIndex(R.propEq('name', value))(presetsSet);\n        if (presetsIndex !== -1) {\n            this.setState(\n                presetsSet[presetsIndex].state\n            );\n            this.setState(\n                { presetName: value }\n            );\n        }\n    }\n\n    handleChange = event => {\n        let { name, value } = event.target\n        // The [ ] brackets here are the setState synatx\n        this.setState({\n            [name]: value,\n        })\n    }\n\n\n\n\n    render() {\n\n        let { number, presetExponent, presetName } = this.state;\n        let { handleSubmit, presetsSet } = this.props;\n\n\n        // preset options\n        let presetsFill = R.map((x, i) => { return (<option key={x.name} name={i}>{x.name}</option>) }, presetsSet);\n\n\n\n\n        // raising presets to a power, using that all units are in terms of meters\n        let presetExponentiator = (obj, exponent) => {\n\n            let output = R.clone(obj);\n            output.number = Math.pow(obj.number, exponent);\n            output.meterValue = 1;\n            output.units = 'm';\n            output.unitsExponent = exponent;\n            output.overallExponent = 1;\n            let presetsIndex = R.findIndex(R.propEq('name', this.state.presetName))(this.props.presetsSet);\n            output.latex = presetsSet[presetsIndex].latex;\n            return (output)\n\n        }\n\n\n        return (\n\n            <div>\n                <form>\n                    <label>Presets </label>\n                    <select\n                        name=\"units\"\n                        id=\"units\"\n                        value={presetName || ''}\n                        onChange={this.handlePresetChange}\n                    >\n                        <option value=\"\"></option>\n                        {presetsFill}\n                    </select>\n\n                    <label>Exponent</label>\n                    <input\n                        type=\"number\"\n                        name=\"presetExponent\"\n                        id=\"presetExponent\"\n                        value={presetExponent || ''}\n                        onChange={this.handleChange}\n                    />\n                </form>\n\n                <input\n                    type=\"button\"\n                    value=\"Submit\"\n                    onClick={() => {\n                        if (!number) {\n                            alert('Please choose a quantity');\n                            this.setState(initialState);\n                        } else if (Number(presetExponent)===0) {\n                            alert('Please choose a non-zero exponent');\n                            this.setState(initialState);\n                        }\n                        else {\n                            handleSubmit(\n                                presetExponentiator(this.state, presetExponent)\n                            );\n                            this.setState(initialState);\n                        }\n                    }\n                    }\n                />\n\n            </div>\n        )\n    }\n\n}\n\n\nexport default Presets","// set of units, all re-expressed in terms of a meters value and a power\n// meterValue and meterExponent determiend by writing 1m=[meterValue]*[units]^[meterExponent]\n\nlet unitsSet = [\n\n    {\n      units: 'eV',\n      meterExponent: -1,\n      meterValue: 5.06 * 10 ** 6,\n    },\n    {\n      units: 'keV',\n      meterExponent: -1,\n      meterValue: 5.06 * 10 ** 9,\n    },\n    {\n      units: 'MeV',\n      meterExponent: -1,\n      meterValue: 5.06 * 10 ** 12,\n    },\n    {\n      units: 'GeV',\n      meterExponent: -1,\n      meterValue: 5.06 * 10 ** 15,\n    },\n    {\n      units: 'J',\n      meterExponent: -1,\n      meterValue: 3.16 * 10 ** 25,\n    },\n    {\n      units: 'K',\n      meterExponent: -1,\n      meterValue: 436,\n    },\n    {\n      units: 'nm',\n      meterExponent: 1,\n      meterValue: 10 ** 9,\n    },\n    {\n      units: 'cm',\n      meterExponent: 1,\n      meterValue: 100,\n    },\n    {\n      units: 'ft',\n      meterExponent: 1,\n      meterValue: 3.28,\n    },\n    {\n      units: 'm',\n      meterExponent: 1,\n      meterValue: 1,\n    },\n    {\n      units: 'km',\n      meterExponent: 1,\n      meterValue: 1 / 1000,\n    },\n    {\n      units: 'mi',\n      meterExponent: 1,\n      meterValue: .000621371192,\n    },\n    {\n      units: 'au',\n      meterExponent: 1,\n      meterValue: 6.68 * 10 ** (-12),\n    },\n    {\n      units: 'ly',\n      meterExponent: 1,\n      meterValue: 1 / (9.46 * 10 ** 15),\n    },\n    {\n      units: 'pc',\n      meterExponent: 1,\n      meterValue: 1 / (3.086 * 10 ** 16),\n    },\n    {\n      units: 'Mpc',\n      meterExponent: 1,\n      meterValue: 1 / (3.086 * 10 ** 22),\n    },\n    {\n      units: 'b',\n      meterExponent: .5,\n      meterValue: 1 * 10 ** 14,\n    },\n    {\n      units: 's',\n      meterExponent: 1,\n      meterValue: 3.33 * 10 ** (-9),\n    },\n    {\n      units: 'days',\n      meterExponent: 1,\n      meterValue: 3.86 * 10 ** (-14),\n    },\n    {\n      units: 'years',\n      meterExponent: 1,\n      meterValue: 1.06 * 10 ** (-16),\n    },\n    {\n      units: 'g',\n      meterExponent: -1,\n      meterValue: 1 / (3.52 * 10 ** (-40)),\n    },\n    {\n      units: 'lb',\n      meterExponent: -1,\n      meterValue: 1.29 * 10 ** 42,\n    },\n    {\n      units: 'kg',\n      meterExponent: -1,\n      meterValue: 1 / (3.52 * 10 ** (-43)),\n    },\n    {\n      units: 'ton',\n      meterExponent: -1,\n      meterValue: 2.58 * 10 ** 45,\n    },\n    {\n      units: 'GN',\n      meterExponent: .5,\n      meterValue: 6.41 * 10 ** 34,\n    }\n  ];\n\n  export default unitsSet;","// preset quantities, all expressed in terms of meters.  state should be the quantity written in the form [number]*m^[meterExponent]\n\nlet presetsSet = [\n  {\n    name: \"Hubble's Constant (Planck 2018)\",\n    latex: 'H_{0}',\n    state: {\n      number: 7.28 * 10 ** -27,\n      meterExponent: -1,\n    }\n  },\n  {\n    name: 'Bohr radius',\n    latex: 'a_{0}',\n    state: {\n      number: 5.29 * 10 ** (-11),\n      meterExponent: 1,\n    }\n  },\n  {\n    name: 'Electron mass',\n    latex: 'm_{e}',\n    state: {\n      number: 2.59 * 10 ** 12,\n      meterExponent: -1,\n    }\n  },\n  {\n    name: 'Proton mass',\n    latex: 'm_{p}',\n    state: {\n      number: 4.75 * 10 ** 15,\n      meterExponent: -1,\n    }\n  },\n  {\n    name: 'Higgs mass',\n    latex: 'm_{H}',\n    state: {\n      number: 6.33 * 10 ** 17,\n      meterExponent: -1,\n    }\n  },\n  {\n    name: 'Reduced Planck Mass',\n    latex: 'M_{\\\\rm pl}',\n    state: {\n      number: 1.28 * 10 ** 34,\n      meterExponent: -1,\n    }\n  },\n  {\n    name: 'Solar Mass',\n    latex: 'M_{\\\\odot}',\n    state: {\n      number: 5.89 * 10 ** 72,\n      meterExponent: -1,\n    }\n  },\n  {\n    name: 'Fine structure constant',\n    latex: '\\\\alpha',\n    state: {\n      number: 1 / 137,\n      meterExponent: 0,\n    }\n  }\n];\n\n\nexport default presetsSet;","import React, { Component } from 'react'\n\n\n// Components\nimport InputForm from './InputForm'\nimport OutputTable from './OutputTable';\nimport Presets from './Presets';\n\n// Importing units and presets\nimport unitsSet from './data/unitsSet'\nimport presetsSet from './data/presetsSet'\n\n\n\n\nlet initialState = {\n  input: [],\n  outputUnit: 'm',\n  GNis1: false,\n};\n\nclass App extends Component {\n\n  state = initialState;\n\n  // Code for handling the submit button and appending new data to input list\n\n  handleSubmit = (x) => {\n    this.setState({ input: [...this.state.input, x] });\n  };\n\n  handleReset = () => {\n    this.setState(initialState);\n  };\n\n  handleOutputUnitChange = (event) => {\n    let { value } = event.target\n    this.setState({ outputUnit: value });\n  };\n\n  handleGNis1Toggle = () => {\n    this.setState({\n      GNis1: !this.state.GNis1,\n    })\n    if (this.state.GNis1) {\n      this.setState({ outputUnit: 'm' })\n    } else { this.setState({ outputUnit: 'GN' }) }\n  }\n\n\n  render() {\n\n    let { input, outputUnit, GNis1 } = this.state;\n\n    return (\n\n      <div className=\"container\">\n        <h1>\n          Natural Units Convertor\n      </h1>\n\n        <p>\n          It is standard practice in high-energy physics to use <em>natural units</em> in which \\(\\hbar=c=k_B=1\\) and to express all dimensionful quantites in terms of a single unit of one's choosing by using \\(\\hbar, c,k_B\\) as conversion factors.\n          In the General Relativity community, it's further common to set \\(G_N=1\\), in which case all quantites can be expressed at unitless numbers.\n      </p>\n\n        <p>\n          The calculator below implements such conversions.\n      </p>\n\n        <h3>\n          Preset Inputs\n      </h3>\n        <Presets\n          handleSubmit={this.handleSubmit}\n          presetsSet={presetsSet} />\n\n        <h3>\n          Manual Input\n      </h3>\n        <InputForm\n          handleSubmit={this.handleSubmit}\n          unitsSet={unitsSet} />\n\n        <h3>\n          Output\n      </h3>\n        <OutputTable\n          input={input}\n          GNis1={GNis1}\n          handleGNis1Toggle={this.handleGNis1Toggle}\n          unitsSet={unitsSet}\n          outputUnit={outputUnit}\n          handleReset={this.handleReset}\n          handleOutputUnitChange={this.handleOutputUnitChange} />\n      </div>\n    )\n  }\n\n}\n\n\n\n\nexport default App;\n","// This is the key file which the html page pulls to render the app.  \n// index.js searches for the \"root\" element in the public/index.html file, which is a div, and renders App.js into it\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n  \n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}